<?php

function bundle_api_save_bundle($bundle_definition) {
  if (empty($bundle_definition->entity_type)) {
    return FALSE;
  }
  if (!bundle_api_support($bundle_definition->entity_type)) {
    return FALSE;
  }
  $info = entity_get_info($bundle_definition->entity_type);
  $save_function = $info['bundle_save'];
  return $save_function($bundle_definition);
}

function bundle_api_get_bundle_key($entity_type, $entity) {
  if (!bundle_api_support($entity_type)) {
    return FALSE;
  }
  $info = entity_get_info($entity_type);
  $key = $info['entity keys']['bundle'];
  if (property_exists($entity, $key)) {
    return $entity->$key;
  }
  return NULL;
}

function bundle_api_support($entity_type) {
  $info = entity_get_info($entity_type);
  // entity doesn't exist
  if (empty($info)) {
    return FALSE;
  }
  // entity doesn't have bundles
  if (empty($info['entity keys']['bundle'])) {
    return FALSE;
  }
  // entity doesn't have a load function defined
  if (empty($info['bundle_load']) || empty($info['bundle_save'])) {
    return FALSE;
  }
  // entity functions aren't callable
  if (!(is_callable($info['bundle_load']) && is_callable($info['bundle_save']))) {
    return FALSE;
  }
  return TRUE;
}

function bundle_api_get_bundle($entity_key = NULL, $bundle_key = NULL) {
  $bundles = drupal_static(__FUNCTION__);
  if (empty($bundles)) {
    $entities = entity_get_info();
    foreach ($entities as $entity_type => $entity_def) {
      if (bundle_api_support($entity_type)) {
        $load_function = $entity_def['bundle_load'];
        $bundles[$entity_type] = array();
        foreach (array_keys($entity_def['bundles']) as $key) {
          $results = $load_function($entity_type, $key);
          foreach (module_implements('bundle_load') as $module) {
            $function = $module . "_bundle_load";
            if (is_callable($function)) {
              $function($results, $entity_type, $key);
            }
          }
          $bundles[$entity_type][$key] = $results;
        }
      }
    }
  }
  if (!empty($entity_key)) {
    if (!empty($bundles[$entity_key])) {
      if (!empty($bundle_key)) {
        if (!empty($bundles[$entity_key][$bundle_key])) {
          return $bundles[$entity_key][$bundle_key];
        }
        return NULL;
      }
      return $bundles[$entity_key];
    }
    return NULL;
  }
  return $bundles;
}

function bundle_api_entity_info_alter(&$info) {
  $info['node'] += array(
    'bundle_load' => 'bundle_api_load_content_type',
    'bundle_save' => 'bundle_api_save_content_type',
  );
}

function bundle_api_bundle_load($bundle_def, $entity, $bundle_key) {
  $bundle_def->entity_type = $entity;
  $bundle_def->bundle_name = $bundle_key;
}

function bundle_api_load_content_type($entity_type, $bundle_name) {
  return node_type_load($bundle_name);
}

function bundle_api_save_content_type($bundle_definition) {
  unset($bundle_definition->entity_type);
  unset($bundle_definition->bundle_name);
  return node_type_save($bundle_definition);
}